https://docs.confluent.io/current/ksql/docs/tutorials/basics-docker.html

docker-compose exec ksql-cli ksql http://ksql-server:8088
SHOW TOPICS;
PRINT 'users';
PRINT 'pageviews';

Create a Stream and Table :

CREATE TABLE users_original (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR)
WITH (kafka_topic='users', value_format='AVRO', key = 'userid');

CREATE STREAM pageviews_original (viewtime bigint, userid varchar, pageid varchar)
WITH (kafka_topic='pageviews', value_format='AVRO');

CREATE STREAM pageviews_enriched
AS SELECT users_original.userid AS userid, pageid, regionid, gender
FROM pageviews_original
LEFT JOIN users_original ON pageviews_original.userid = users_original.userid;

CREATE STREAM pageviews_female AS
SELECT * FROM pageviews_enriched
WHERE gender = 'FEMALE';

CREATE STREAM pageviews_female_like_89
WITH (kafka_topic='pageviews_enriched_r8_r9') AS
SELECT * FROM pageviews_female
WHERE regionid LIKE '%_8' OR regionid LIKE '%_9';

CREATE TABLE pageviews_regions
  WITH (VALUE_FORMAT='avro') AS
SELECT gender, regionid , COUNT(*) AS numusers
FROM pageviews_enriched
  WINDOW TUMBLING (size 30 second)
GROUP BY gender, regionid
HAVING COUNT(*) > 1;

Write Queries :

SELECT pageid FROM pageviews_original LIMIT 3;
SELECT * FROM pageviews_enriched;
SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;

SHOW QUERIES;
DESCRIBE EXTENDED PAGEVIEWS_REGIONS;


Using Nested Schemas (STRUCT) in KSQL :
